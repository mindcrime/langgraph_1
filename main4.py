from langchain.agents import create_agent
from langchain.tools import tool
from langchain.agents.middleware import HumanInTheLoopMiddleware
from langgraph.checkpoint.memory import InMemorySaver
from langchain_ollama.chat_models import ChatOllama
from langgraph.types import Command


@tool
def get_weather( cityName ):
    """Search for weather details by cityName and returns the weather for a given city.

    Args:
        cityName: the city for which to return the weather 
    """
    print( f"get_weather called for cityName: {cityName}" )    
    return "It's 72Â° Fahrenheit, sunny, and clear."


@tool
def get_art_scene(cityName):
    """
    Search for a description of the art scene in a given city, searching by cityName.

    Args:
        cityName: the city for which to return the art scene description.
    """
    print( f"get_art_scene called for cityName: {cityName}")
    return "There is a vibrant and diverse art scene, encompassing world-class institutions like STROVA, a thriving landscape of independent galleries, and iconic, colorful street murals, particularly in the Ironclad District."

@tool
def send_email_report( cityName, reportContent ):
    """
    Emails a report, generated by the agent, for a given city. 

    Args:
        cityName: the name of the city for which the report was generated.
        reportContent: the body of the report, generated by the agent in earlier steps.
    """

    print( f"send_email_report called for cityName: {cityName}" )

    
    return "Email sent"


def main():

    print("Hello from main4")


    ollama_host = "http://morpheus:8080" 
    llm = ChatOllama(model="gpt-oss", base_url=ollama_host) 

    
    agent = create_agent(
        model=llm,
        tools = [get_weather,get_art_scene,send_email_report],
        checkpointer=InMemorySaver(),
        middleware=[
        HumanInTheLoopMiddleware(
            interrupt_on={
                # Require approval, editing, or rejection for sending emails
                "send_email_report": {
                    "allowed_decisions": ["approve", "edit", "reject"],
                }
            }
        ),
    ],
        system_prompt="You are a helpful research assistant." )


    # this is required for the Checkpointer (InMemorySaver((), see above) to work.
    config = {"configurable": {"thread_id": "thread-1"}}

    
    result = agent.invoke({
        "messages": [
            {"role": "user", "content": "Generate a report that tells something about San Francisco, in one or two sentences at most. Also include a description of the weather, and a description of the art scene there. Email the generated report. When finished, just return the result of sending the email."}
        ]
    }, config=config)

    print(result["__interrupt__"])
    
    user_input = input("Approve or Deny sending email report: ")
    
    # agent.invoke(Command(resume=True), config=config)

    result = agent.invoke( Command( 
        resume={"decisions": [{"type": user_input }]}  # or "edit", "reject"
    ), 
                  config=config # Same thread ID to resume the paused conversation
                 )

    
    
    print( "Result: ", result['messages'][6].content)
    

if __name__ == "__main__":
    main()
